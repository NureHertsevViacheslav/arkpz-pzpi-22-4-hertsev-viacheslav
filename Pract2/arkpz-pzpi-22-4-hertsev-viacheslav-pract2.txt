Харківський університет радіоелектроніки 
Факультет комп'ютерних наук 
Кафедра програмної інженерії 
ЗВІТ 
до практичної роботи з дисципліни 
"Аналіз та рефакторинг коду" 
на тему: "Методи рефакторингу коду програмного забезпечення"
Виконав ст. гр ПЗПІ-22-4 
 Герцев В’ячеслав Андрійович
Перевірив 
ст. викл. кафедри ПІ
Сокорчук Ігор Петрович 




Харків 2024

Мета: навчити студентів основним методам рефакторингу коду на основі реальних прикладів з їхніх власних програмних проєктів. Студенти повинні навчитися ідентифікувати проблеми в коді та використовувати відповідні методи рефакторингу для покращення його якості.
Висновки
У процесі виконання завдання було досліджено три методи рефакторингу коду, що сприяють покращенню його структури, читабельності та підтримуваності. Застосування цих методів виявилось корисним для вирішення проблем, пов'язаних із надмірною складністю, дублюванням коду та труднощами у розумінні логіки.
Метод «Extract Method» (Виділення методу) дозволяє зменшити складність великих функцій та методів, виділяючи логічно завершені фрагменти коду в окремі методи. Це допомагає полегшити читання і тестування коду, а також зменшити ймовірність виникнення помилок, оскільки код стає більш модульним.
Метод «Rename Variable» (Перейменування змінної) є важливим для підвищення зрозумілості коду. Чітко названі змінні дозволяють іншим розробникам або майбутнім версіям самого програміста легше зрозуміти логіку роботи коду. Перейменування змінних, таких як tag, вказує на те, що вони виконують певну функцію, що дозволяє уникнути непорозумінь при роботі з кодом.
Метод «Simplify Conditional Expressions» (Спрощення умовних виразів) дозволяє зменшити складність умовних конструкцій, роблячи код більш лінійним і зрозумілим. Спрощення умовних виразів допомагає уникнути складних і заплутаних умов, що значно полегшує підтримку та модифікацію коду в майбутньому.
Загалом, застосування методів рефакторингу дозволяє не тільки поліпшити якість коду, а й забезпечити його більшу гнучкість та спрощене подальше вдосконалення. Ці методи є важливими інструментами для підтримки високої якості програмного забезпечення протягом його життєвого циклу, а також для зручної роботи команд розробників.



Додаток А
Посилання на відеозапис - https://youtu.be/I3SAmsdxmmw

Методи рефакторингу коду програмного забезпечення
Герцев В’ячеслав Андрійович ПЗПІ-22-4
30.11.2024

Вступ
Рефакторинг – це процес покращення структури коду без зміни його функціональності. Головна мета рефакторингу – підвищити читабельність, підтримуваність та ефективність програмного забезпечення.
Переваги рефакторингу:
зменшення складності коду.
легша підтримка та розширення.
зменшення технічного боргу.
покращення продуктивності команди.

2

Основні методи рефакторингу
1. Extract Method (Виділення методу)
Опис: Розбиває довгі методи на менші логічні блоки, створюючи нові методи з чіткими завданнями. Це покращує читабельність і спрощує налагодження.
Проблема: Довгий метод, який складно зрозуміти та протестувати.
Код до рефакторингу:
void calculateTotalPrice() {
    int total = 0;
    for (int i = 0; i < itemsCount; i++) {
        total += items[i].price * items[i].quantity;
    }
    printf("Total price: %d\n", total);
}


3

Код після рефакторингу:
int calculateItemTotalPrice(Item item) {
    return item.price * item.quantity;
}

void calculateTotalPrice() {
    int total = 0;
    for (int i = 0; i < itemsCount; i++) {
        total += calculateItemTotalPrice(items[i]);
    }
    printf("Total price: %d\n", total);
}



4

2. Rename Variable (Перейменування змінної)
Опис: Заміна невдалих назв змінних на більш зрозумілі та осмислені.
Проблема: Неочевидна назва змінної, що ускладнює розуміння коду.
Код до рефакторингу:
int x = 10; // кількість товарів
int y = 50; // ціна товару
int z = x * y;
printf("Сума: %d\n", z);

Код після рефакторингу:
int itemCount = 10; 
int itemPrice = 50; 
int totalCost = itemCount * itemPrice;
printf("Сума: %d\n", totalCost);


5

3. Simplify Conditional Expressions (Спрощення умовних виразів)
Опис: Зменшення складності умовної логіки шляхом виділення методів або використання поліморфізму.
Проблема: Складна умовна конструкція з кількома вкладеннями.
Код до рефакторингу:
if (user.role == 1) {
    printf("Адміністратор\n");
} else if (user.role == 2) {
    printf("Менеджер\n");
} else if (user.role == 3) {
    printf("Користувач\n");
} else {
    printf("Роль невідома\n");
}



6

Код після рефакторингу:
void printUserRole(int role) {
    switch (role) {
        case 1: printf("Адміністратор\n"); break;
        case 2: printf("Менеджер\n"); break;
        case 3: printf("Користувач\n"); break;
        default: printf("Роль невідома\n");
    }
}




7

Приклад рефакторингу на основі коду студента
Оригінальний код
private void OnTriggerEnter2D(Collider2D collision)
{
    // Check if the collision is happening with a game object with "ground" tag.
    if (collision.gameObject.tag == "ground")
    {
        grounded = true;
    }
    else if (collision.gameObject.tag == "block")
    {
        grounded = true;
    }
    else if (collision.gameObject.tag == "Enemy")
    {
        SceneManager.LoadScene(0);
    }
    else if (collision.gameObject.tag == "Exit")
    {
        thx.SetActive(true);
    }
}





8

Код після рефакторингу:
private void OnTriggerEnter2D(Collider2D collision)
{
    string tag = collision.gameObject.tag;

    if (IsGroundTag(tag))
    {
        grounded = true;
    }
    else if (tag == "Enemy")
    {
        HandleEnemyCollision();
    }
    else if (tag == "Exit")
    {
        HandleExitCollision();
    }
}





9

private bool IsGroundTag(string tag)
{
    return tag == "ground" || tag == "block";
}

private void HandleEnemyCollision()
{
    SceneManager.LoadScene(0);
}

private void HandleExitCollision()
{
    thx.SetActive(true);
}





10

Покрокова демонстрація рефакторингу
Обрано методи:
Extract Method (Виділення методу): для створення окремих методів IsGroundTag, HandleEnemyCollision, HandleExitCollision, які виконують вузько визначені задачі.
Simplify Conditional Expressions (Спрощення умовних виразів): об'єднання схожих умов для тегів "ground" та "block" в метод IsGroundTag.
Код має повторювані перевірки тегів ("ground", "block").
Метод OnTriggerEnter2D перевантажений логікою, що робить його складним для розуміння та тестування.
Обробка подій (Enemy, Exit) не структурована.
11

Внесення змін
Виділено метод IsGroundTag для об'єднання умов, які задають значення змінної grounded.
Для обробки взаємодії з "Enemy" та "Exit" створено окремі методи HandleEnemyCollision та HandleExitCollision.
Логіка OnTriggerEnter2D спрощена, тепер вона лише викликає ці методи.






12

Інструменти для рефакторингу
Visual Studio пропонує кілька інструментів для автоматизації рефакторингу.
Quick Actions and Refactorings: визначає проблемні ділянки коду та пропонує автоматичні виправлення. Наприклад, можна виділити фрагмент коду та вибрати Extract Method, щоб створити новий метод.
Code Cleanup: вбудований інструмент, який дозволяє форматувати код та оптимізувати його, зокрема видаляти невикористані using-директиви, впорядковувати інструкції та виправляти відступи.
Code Metrics: дозволяє аналізувати код на предмет складності та визначити ділянки, які потребують рефакторингу.
Live Code Analysis: надає поради в реальному часі щодо покращення коду.




13

Висновки
Рефакторинг є важливим етапом підтримки та розвитку програмного забезпечення. Він дозволяє зменшити складність коду, полегшити його розуміння та забезпечити легке масштабування. Методи рефакторингу, такі як Extract Method, Rename Variable і Simplify Conditional Expressions, є універсальними і можуть бути адаптовані для різних проектів. Регулярний рефакторинг – це інвестиція в якість коду, яка окуповується у довгостроковій перспективі.





14

Список використаних джерел:
Martin Fowler. Refactoring: Improving the Design of Existing Code;
Документація C Programming Language;
Документація C# Programming Language;
Офіційні матеріали IDE (Visual Studio).






15
