//config/dbConfig.js)
const sql = require('mssql');

// Конфігурація для підключення до бази даних
const dbConfig = {
    user: 'your_username',
    password: 'your_password',
    server: 'your_server',
    database: 'your_database',
    options: {
        encrypt: true, // Якщо потрібне шифрування
        trustServerCertificate: true, // Для локального сервера
    },
};

const poolPromise = new sql.ConnectionPool(dbConfig)
    .connect()
    .then((pool) => {
        console.log('Connected to MSSQL');
        return pool;
    })
    .catch((err) => console.error('Database Connection Failed!', err));

module.exports = { sql, poolPromise };
//Логіка роботи з базою даних (services/dbService.js)
const { sql, poolPromise } = require('../config/dbConfig');

// Отримати список співробітників
async function getEmployees() {
    try {
        const pool = await poolPromise;
        const result = await pool.request().query('SELECT * FROM Employees');
        return result.recordset;
    } catch (err) {
        console.error('Error fetching employees:', err);
        throw err;
    }
}

// Додати співробітника
async function addEmployee(name, email, phoneNumber) {
    try {
        const pool = await poolPromise;
        const result = await pool.request()
            .input('Name', sql.NVarChar, name)
            .input('Email', sql.NVarChar, email)
            .input('PhoneNumber', sql.NVarChar, phoneNumber)
            .query(`
                INSERT INTO Employees (Name, Email, PhoneNumber) 
                VALUES (@Name, @Email, @PhoneNumber)
            `);
        return result.rowsAffected[0];
    } catch (err) {
        console.error('Error adding employee:', err);
        throw err;
    }
}

module.exports = { getEmployees, addEmployee };
//Маршрути для API (routes/apiRoutes.js)
const express = require('express');
const dbService = require('../services/dbService');
const router = express.Router();

// Отримати всіх співробітників
router.get('/employees', async (req, res) => {
    try {
        const employees = await dbService.getEmployees();
        res.status(200).json(employees);
    } catch (err) {
        res.status(500).json({ error: 'Failed to fetch employees' });
    }
});

// Додати співробітника
router.post('/employees', async (req, res) => {
    const { name, email, phoneNumber } = req.body;
    try {
        const result = await dbService.addEmployee(name, email, phoneNumber);
        res.status(200).json({ message: `${result} employee(s) added successfully.` });
    } catch (err) {
        res.status(500).json({ error: 'Failed to add employee' });
    }
});

module.exports = router;
//Головний файл додатка (app.js)
const express = require('express');
const bodyParser = require('body-parser');
const apiRoutes = require('./routes/apiRoutes');
const { swaggerDocs, swaggerUi } = require('./swaggerConfig');

const app = express();
const PORT = 3000;

app.use(bodyParser.json());
app.use('/api', apiRoutes);

// Swagger документація
app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerDocs));

app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
    console.log(`Swagger docs available at http://localhost:${PORT}/api-docs`);
});


