Харківський університет радіоелектроніки
Факультет комп'ютерних наук
Кафедра програмної інженерії

ЗВІТ
до практичної роботи з дисципліни
"Аналіз та рефакторинг коду"
на тему: "Правила оформлення програмного коду"

Виконав ст. гр ПЗПІ-22-4
Герцев В’ячеслав Андрійович
Перевірив
ст. вк кафедри ПІ
Сокорчук Ігор Петрович

Харків 2024

Мета: ознайомити студентів з основними рекомендаціями щодо написання
чистого, ефективного та підтримуваного коду для різних мов
програмування, а також навчити аналізувати та рефакторити код для
покращення його якості.
Висновки: У ході аналізу правил оформлення коду для мови
програмування C було виявлено, що дотримання стандартів стилю і
чіткого структурування значно покращує якість коду та знижує складність
його підтримки.
Читабельність і зрозумілість коду – ключ до успішного командного
програмування. Використання осмислених імен для змінних, функцій і
файлів забезпечує інтуїтивне розуміння коду навіть без додаткових
коментарів.
Правильне форматування (відступи, дужки, пробіли) робить код візуально
впорядкованим і полегшує його читання навіть у складних проектах.
Коментарі важливі для складних і нетривіальних алгоритмів, але їх слід
використовувати в міру, уникаючи надмірного або очевидного
коментування.
Чіткість функцій допомагає спростити тестування та повторне
використання коду. Кожна функція повинна виконувати лише одну задачу.
Структура проекту – організована файлово-директорійна структура
дозволяє легко орієнтуватися в коді, особливо в багатофайлових проектах.
Дотримання цих рекомендацій підвищує ефективність роботи як
індивідуального програміста, так і всієї команди розробників. Правильно
оформлений код легко адаптувати, масштабувати й інтегрувати у великі
системи. Це не лише полегшує майбутню підтримку, але й економить час
та ресурси, знижуючи ризик помилок у програмному забезпеченні.

2

Додаток А
Посилання на відеозапис - https://youtu.be/ub42tLzwZms

Правила оформлення
програмного коду

Герцев В'ячеслав Андрійович ПЗПІ-22-4
10.11.2024

Значення правильного оформлення коду

Код є основою будь-якої програми, і його правильне оформлення є
надзвичайно важливим. Від цього залежить, наскільки легко інші розробники
зможуть зрозуміти, підтримувати чи змінювати його. Дотримання стандартів
оформлення підвищує читабельність коду, полегшує співпрацю в команді і
мінімізує ризик виникнення помилок. Крім того, добре структурований код
скорочує час, необхідний для діагностики й усунення проблем.


Рекомендація: використовуйте осмислені назви змінних і функцій.

Опис: назви мають чітко передавати зміст об'єкта, щоб код був
самодокументованим.

Приклад:

/C/

// Поганий приклад

int f(int x, int у) {
return x + у;
}


// Гарний приклад
int calculate sum(int first_number, int 5зесопа пипрег) {
return first number + second number;
}

Рекомендація: використовуйте стислі та зрозумілі коментарі де це потрібно

Опис: Коментарі необхідні для пояснення складних алгоритмів чи
нетривіальних рішень. Водночас очевидні речі краще не коментувати, адже
це перевантажує код і не додає йому корисної інформації. Наприклад,
коментар, який пояснює базові арифметичні дії, є зайвим. Коментарі повинні
бути короткими, чіткими та завжди відповідати реальному стану коду.

Приклад:
/C/
// Поганий приклад
int sum = а + р; // Сума двох чисел

// Гарний приклад
// Розраховуємо загальний дохід від продажів
int total_income = revenue + profit;

Чіткість та стислість функцій
Рекомендація: робіть назви функцій чіткими та стислими

Опис: кожна функція повинна виконувати лише одну задачу. Це спрощує
тестування, повторне використання і модифікацію коду. Довгі функції, що
містять багато різноманітних дій, ускладнюють розуміння логіки програми. Ім'я
функції має чітко відображати її призначення, щоб розробник міг зрозуміти,
що вона робить, навіть без заглиблення у її код.

Приклад:
/C/
// Поганий приклад
void process() { /* багато різних дій */ }

// Гарний приклад
void read_input();
void calculate results ();
void display output ();

Рекомендація: Дотримуйтеся однорідного стилю форматування коду.

Опис: Чіткий стиль допомагає зберігати читабельність. Популярними є стилі
K&R (Kernighan and Ritchie) та Allman.

Приклад:

/C/
// K&R стиль
int add(int a, int b) {
return a+ р;
}

// Allman стиль
int add(int a, int b)
{
return a + b;
}

На цьому прикладі видно, як правильне оформлення покращує читабельність
коду. Відсутність відступів, пробілів і неправильне розміщення дужок
ускладнюють розуміння програми. Після застосування правил код стає чітким
і легко читається.

/C/
До форматування:
int main() {int x=5, y=10;printf("Sum:%d",x+y);return 0;)

Після форматування:
#include <stdio.h>

int main() {
Int x = 5;
int y = 10;
printf("Sum: %d\n", x + у);
return 0;
}

Рекомендація: Розділяйте код Ha файли за логікою програми.

Опис: Виносьте заголовки в .h файли, а реалізацію в .с, щоб полегшити
читання і повторне використання.

Приклад:

/C/
// calculator.h
#ifndef CALCULATOR_H
#define CALCULATOR Н

int add(int a, int b);
int subtract(int a, int b);

#endif

// calculator.c
#include "calculator.h"

int add(int a, int b) {
return a + b;

int subtract(int a, int b) {
return a - b;
}

// main.c
#include <stdio.h>
#include "calculator.h"

int main() {
int sum = add(3, 5);
printf("Sum: %d\n", sum);
return 0;
}

Рекомендація: He дублюйте код (DRY).
Опис: використовуйте функції для повторюваних дій.
Приклад:
/C/
// Поганий приклад
void print_header() {
printf ("=== Welcome ===\n");
}

void print footer() {
printf ("=== Goodbye ===\n");
}

// Гарний приклад
void ргіпі _message(const char* message) |
printf ("=== $s ===\n", message);
}

Висновки
Дотримання правил оформлення коду є основою якісного програмування.
Використання осмислених імен, правильного форматування, коментарів та
структурованої організації файлів забезпечує легкість підтримки, розвиток
проєкту та комфорт для інших розробників, які працюватимуть із кодом.
